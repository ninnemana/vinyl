// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: discogs.proto

package discogs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DiscogsClient is the client API for Discogs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiscogsClient interface {
	RequestToken(ctx context.Context, in *RequestTokenParams, opts ...grpc.CallOption) (*RequestTokenResult, error)
	AccessToken(ctx context.Context, in *AccessTokenParams, opts ...grpc.CallOption) (*AccessTokenResult, error)
}

type discogsClient struct {
	cc grpc.ClientConnInterface
}

func NewDiscogsClient(cc grpc.ClientConnInterface) DiscogsClient {
	return &discogsClient{cc}
}

func (c *discogsClient) RequestToken(ctx context.Context, in *RequestTokenParams, opts ...grpc.CallOption) (*RequestTokenResult, error) {
	out := new(RequestTokenResult)
	err := c.cc.Invoke(ctx, "/discogs.Discogs/RequestToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discogsClient) AccessToken(ctx context.Context, in *AccessTokenParams, opts ...grpc.CallOption) (*AccessTokenResult, error) {
	out := new(AccessTokenResult)
	err := c.cc.Invoke(ctx, "/discogs.Discogs/AccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscogsServer is the server API for Discogs service.
// All implementations must embed UnimplementedDiscogsServer
// for forward compatibility
type DiscogsServer interface {
	RequestToken(context.Context, *RequestTokenParams) (*RequestTokenResult, error)
	AccessToken(context.Context, *AccessTokenParams) (*AccessTokenResult, error)
	mustEmbedUnimplementedDiscogsServer()
}

// UnimplementedDiscogsServer must be embedded to have forward compatible implementations.
type UnimplementedDiscogsServer struct {
}

func (UnimplementedDiscogsServer) RequestToken(context.Context, *RequestTokenParams) (*RequestTokenResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestToken not implemented")
}
func (UnimplementedDiscogsServer) AccessToken(context.Context, *AccessTokenParams) (*AccessTokenResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccessToken not implemented")
}
func (UnimplementedDiscogsServer) mustEmbedUnimplementedDiscogsServer() {}

// UnsafeDiscogsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiscogsServer will
// result in compilation errors.
type UnsafeDiscogsServer interface {
	mustEmbedUnimplementedDiscogsServer()
}

func RegisterDiscogsServer(s grpc.ServiceRegistrar, srv DiscogsServer) {
	s.RegisterService(&Discogs_ServiceDesc, srv)
}

func _Discogs_RequestToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestTokenParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscogsServer).RequestToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discogs.Discogs/RequestToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscogsServer).RequestToken(ctx, req.(*RequestTokenParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discogs_AccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessTokenParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscogsServer).AccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discogs.Discogs/AccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscogsServer).AccessToken(ctx, req.(*AccessTokenParams))
	}
	return interceptor(ctx, in, info, handler)
}

// Discogs_ServiceDesc is the grpc.ServiceDesc for Discogs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Discogs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "discogs.Discogs",
	HandlerType: (*DiscogsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestToken",
			Handler:    _Discogs_RequestToken_Handler,
		},
		{
			MethodName: "AccessToken",
			Handler:    _Discogs_AccessToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "discogs.proto",
}
